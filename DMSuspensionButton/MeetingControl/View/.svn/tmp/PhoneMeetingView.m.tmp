//
//  PhoneMeetingView.m
//  botong
//
//  Created by demin on 16/7/12.
//  Copyright © 2016年 Demin. All rights reserved.
//

#import "PhoneMeetingView.h"
#import "MemberIconsCollectionViewCell.h"
#import "MemberPassCell.h"  
#import "YLPopViewController.h"
#import "MeetingAnimation.h"
#import <SDWebImage/UIButton+WebCache.h>
#import <SDWebImage/UIImageView+WebCache.h>
#import "UIImage+Category.h"
#import "ContactsViewController.h"

#import <CoreAudio/CoreAudioTypes.h>
#import <AVFoundation/AVFoundation.h>





@interface PhoneMeetingView ()<UITableViewDelegate,UITableViewDataSource,UICollectionViewDelegate,UICollectionViewDataSource,UICollectionViewDelegateFlowLayout>

@end


@implementation PhoneMeetingView

- (void)awakeFromNib {
    
    //接受选择回调 使用与Dang相同通知
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(selectedReceivers:) name:kNOTIFICATION_CREATEDANG object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(cancelSelectReceivers:) name:kNOTIFICATION_CANCELSELECTPERSON object:nil];

    [self addSubViews];
    
}

- (void)cancelSelectReceivers:(NSNotification *)noti {
    self.alpha = 1;
}

- (void)selectedReceivers:(NSNotification *)noti {
    
    self.alpha = 1;
    
    SimplePersonInfoModel *userInfo = [NSKeyedUnarchiver unarchiveObjectWithData:[[NSUserDefaults standardUserDefaults] objectForKey:@"userInfo"]];
    
    NSMutableArray *receivers = [NSMutableArray array];
    for (GroupPeopleData *model in noti.object) {
        if ([model.mobile isEqualToString:userInfo.userData.mobile]) {
            [noti.object removeObject:model];
            break;
        }
    }
    [receivers addObjectsFromArray:noti.object];

    self.MeetDataArray = [NSMutableArray arrayWithArray:receivers];
    [self.memberIconsCollectionView reloadData];
}


- (void)addSubViews {
    self.muteButton.selected = NO;
    self.overButton.layer.cornerRadius = self.overButton.frame.size.height/2;
    self.iconButton.layer.cornerRadius = self.iconButton.frame.size.height/2;
    self.iconButton.layer.masksToBounds = YES;
    
    self.memberPassDetailsTableView.delegate = self;
    self.memberPassDetailsTableView.dataSource = self;
    [self.memberPassDetailsTableView registerNib:[UINib nibWithNibName:@"MemberPassCell" bundle:[NSBundle mainBundle]] forCellReuseIdentifier:@"passCell"];
    
    self.memberIconsCollectionView.delegate = self;
    self.memberIconsCollectionView.dataSource = self;
    [self.memberIconsCollectionView registerNib:[UINib nibWithNibName:@"MemberIconsCollectionViewCell" bundle:[NSBundle mainBundle]] forCellWithReuseIdentifier:@"MemberCollectionCell"];
    
    
}

#pragma mark - tableView delegate
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return 5;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    MemberPassCell *cell = [tableView dequeueReusableCellWithIdentifier:@"passCell"];
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    cell.passDetailLabel.text = @"会议开始";
    cell.passTimeLabel.text = @"10:21";
    return cell;
}

#pragma mark - collectionView delegate
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath{
    return CGSizeMake(71, 69);
}

- (UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section {
    return UIEdgeInsetsMake(10, 10, 10, 10);
}

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section{
    return self.MeetDataArray.count;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath{
    MemberIconsCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"MemberCollectionCell" forIndexPath:indexPath];
    cell.iconImageView.layer.cornerRadius = 22.0f;
    cell.iconImageView.layer.masksToBounds = YES;
    //获取上个界面传过来的数据
    GroupPeopleData * model = self.MeetDataArray[indexPath.row];
    cell.iconTitleLabel.text = model.nick;
    NSString *moble = model.mobile;
    NSString *name = model.nick;
    UIImage *placehoderImage =   [[UIImage imageFormColor:[BTCommonTool getUserIconColor:moble] frame:CGRectMake(0, 0, 45, 45)] imageWithTitle:(name.length > 2 ? [name substringWithRange:NSMakeRange(name.length -2, 2)] : name) fontSize:18.0];
    
    [cell.iconImageView sd_setImageWithURL:[NSURL URLWithString:model.avatar] placeholderImage:[UIImage imageNamed:@"image_placehoder"] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
        cell.iconImageView.image = placehoderImage;
    }];


    
    return cell;
}

//最小化界面
- (IBAction)clickMinButton:(id)sender {
    [self.MeetAnimation minimizingViewAniamtion];
    self.MinButton.enabled = NO;
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        //最小化界面的通知
        NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
        [center postNotificationName:@"ClickMinButton" object:nil];
    });
}

//添加成员
- (IBAction)addMembers:(id)sender {
//    NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
//    NSDictionary *dict = [NSDictionary dictionaryWithObject:self.MeetDataArray forKey:@"keykey"];
//    [center postNotificationName:@"ClickAddMemberButton" object:nil userInfo:dict];
//
    
    NSMutableArray *selectedArrM = [NSMutableArray array];
    for (GroupPeopleData *model in self.MeetDataArray) {
        SimplePersonInfoModel *simpleModel = [[SimplePersonInfoModel alloc] init];
        simpleModel.userData = [[UserData alloc] init];
        simpleModel.userData.mobile = model.mobile;
        simpleModel.userData.nick = model.nick;
        simpleModel.userData.avatar = model.avatar;
        [selectedArrM addObject:simpleModel];
        
    }
    
    SimplePersonInfoModel *userInfo = [NSKeyedUnarchiver unarchiveObjectWithData:[[NSUserDefaults standardUserDefaults] objectForKey:@"userInfo"]];
    UITabBarController *tabVC = (UITabBarController *)[[[[UIApplication sharedApplication] delegate] window] rootViewController];
    ContactsViewController *contactVC = [[ContactsViewController alloc] init];
    contactVC.tagForVC = 99;
    contactVC.isFromDang = YES;
    [selectedArrM addObject:userInfo];
    contactVC.dataArr = selectedArrM;
    contactVC.surplusNum = 16 - self.MeetDataArray.count;
    contactVC.checkTotalNum = 16;
    
    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:contactVC];
    nav.navigationBar.tintColor = [UIColor whiteColor];
    nav.navigationBar.titleTextAttributes = @{NSForegroundColorAttributeName: [UIColor whiteColor]};
    nav.navigationBar.barTintColor = BASE_COLOR;
    kWEAK_SELF;
    [tabVC presentViewController:nav animated:YES completion:^{
        weakSelf.alpha = 0;

    }];
    
}

//会议纪要
- (IBAction)clickMinutesButton:(id)sender {
    
    _minutesButton.selected = YES;
    
    YLPopViewController *popView = [[YLPopViewController alloc] init];
    popView.contentViewSize = CGSizeMake([UIScreen mainScreen].bounds.size.width-40, 210);
    popView.Title = @"会议纪要";
    popView.placeHolder = @"请在此输入内容...";
    popView.peopleArrM = self.MeetDataArray;
    popView.wordCount = 150;//不设置则没有
    [popView addContentView];//最后调用
    popView.confirmBlock = ^(NSString *text) {
        
    };
    kWEAK_SELF;
    popView.deselectBlock = ^() {
        weakSelf.minutesButton.selected = NO;
    };
}

//会议结束
-(IBAction)quitMeetingClick:(id)sender
{
    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];
    [user removeObjectForKey:@"meetingView"];
    [self.MeetAnimation meetingViewDismissAniation];
  
}

//静音
- (IBAction)clickMuteButton:(id)sender {
    self.muteButton.selected = !self.muteButton.selected;
   
    
    [showMessage showMessage:@"该功能正在开发中，敬请期待!"];
    
    AVAudioSession *audioSession = [AVAudioSession sharedInstance];
    [audioSession recordPermission];
}

//返回录音是否允许
- (AVAudioSessionRecordPermission)recordPermission {
    if (self.muteButton.selected) {
        return AVAudioSessionRecordPermissionDenied;
    }
    return AVAudioSessionRecordPermissionGranted;
}


//判断是否允许使用麦克风7.0新增的方法requestRecordPermission
-(BOOL)canRecord
{
    __block BOOL bCanRecord = YES;
    if ([[[UIDevice currentDevice] systemVersion] compare:@"7.0"] != NSOrderedAscending)
    {
        AVAudioSession *audioSession = [AVAudioSession sharedInstance];
        if ([audioSession respondsToSelector:@selector(requestRecordPermission:)]) {
            [audioSession performSelector:@selector(requestRecordPermission:) withObject:^(BOOL granted) {
//                if (granted) {
//                    bCanRecord = NO;
//                }
//                else {
//                    bCanRecord = YES;
//                    dispatch_async(dispatch_get_main_queue(), ^{
//                        [[[UIAlertView alloc] initWithTitle:nil
//                                                    message:@"app需要访问您的麦克风。\n请启用麦克风-设置/隐私/麦克风"
//                                                   delegate:nil
//                                          cancelButtonTitle:@"关闭"
//                                          otherButtonTitles:nil] show];
//                    });
//                }
                
                }];
        }
    }
    
    return bCanRecord;
}


- (void)popMeetingView {
    self.MeetAnimation = [MeetingAnimation SharedMeetingAnimation];
    [self.MeetAnimation popMeetingViewAnimationWithView:self andFirstButton:self.iconButton andSecondButton:self.overButton andthirdButton:self.MinButton
     ];
}



@end
